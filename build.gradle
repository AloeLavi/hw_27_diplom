plugins {
    id 'java'
    id 'io.qameta.allure' version '2.10.0'
    id "io.freefair.lombok" version "6.0.0-m2"

}

group 'org.example'
version '1.0-SNAPSHOT'

def allureVersion = "2.19.0",
    slf4jVersion = "1.7.32",
    assertJVersion = "3.23.1"

allure {
    report {
        version.set(allureVersion)
    }
    adapter { // отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set(allureVersion) //версия интеграции фреймворка и Allure
            }
        }
    }
}
repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            'com.codeborne:selenide:6.7.2',
            'org.junit.jupiter:junit-jupiter:5.9.0',
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:rest-assured:5.3.0",
            "org.assertj:assertj-core:$assertJVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "com.fasterxml.jackson.core:jackson-databind:2.14.1",
            'org.projectlombok:lombok:1.18.22',
            'org.aeonbits.owner:owner:1.0.4'





    )
}

test {
    useJUnitPlatform()
    systemProperties(System.getProperties())

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}



tasks.withType(Test) {
    systemProperties(System.getProperties()) // Без нее параметры из командной строки
    // не будут передаваться в скрипт сборки.
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}